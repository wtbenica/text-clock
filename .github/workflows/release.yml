name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y glib2.0-dev gettext gnupg

      - name: Install Yarn v4
        run: |
          corepack enable
          corepack prepare yarn@4.9.4 --activate

      - name: Install dependencies
        run: |
          yarn install --immutable

      - name: Validate and build
        run: |
          make validate

      - name: Create release package
        run: |
          make pack

      - name: Import GPG private key (optional)
        if: ${{ env.GPG_PRIVATE_KEY != '' }}
        run: |
          set -euo pipefail
          # Try importing the secret directly. If that fails, attempt to
          # base64-decode the secret and import the decoded content. This
          # allows storing the key either as a raw ASCII-armored key (with
          # newlines) or as a base64-encoded string in the repo secret.
          echo "Attempting direct GPG import..."
          if echo "$GPG_PRIVATE_KEY" | gpg --batch --import 2>/dev/null; then
            echo "GPG key imported (direct)."
          else
            echo "Direct import failed; trying base64 decode..."
            echo "$GPG_PRIVATE_KEY" | base64 --decode | gpg --batch --import
            echo "GPG key imported (base64 decoded)."
          fi

      - name: Sign release ZIP (optional)
        if: ${{ env.GPG_PRIVATE_KEY != '' }}
        run: |
          set -euo pipefail
          # Sign the unversioned ZIP that will be uploaded to the release
          ZIP="text-clock@benica.dev.zip"
          if [ ! -f "$ZIP" ]; then
            echo "No release ZIP found to sign; skipping signature step.";
            exit 0;
          fi
          sigfile="$ZIP.sig"
          echo "Signing $ZIP -> $sigfile"
          # Create detached signature (binary)
          gpg --batch --yes --output "$sigfile" --detach-sign "$ZIP"

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Use custom RELEASE_NOTES.md if present, else generate from commits
        id: release_notes
        run: |
          if [ -f RELEASE_NOTES.md ]; then
            echo "Using custom RELEASE_NOTES.md for release notes."
            cp RELEASE_NOTES.md release_notes.md
          else
            if git describe --tags --abbrev=0 HEAD~1 >/dev/null 2>&1; then
              PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1)
              echo "## Changes since $PREV_TAG" > release_notes.md
              echo "" >> release_notes.md
              git log --pretty=format:"- %s" $PREV_TAG..HEAD >> release_notes.md
            else
              echo "## Changes" > release_notes.md
              echo "" >> release_notes.md
              echo "Initial release" >> release_notes.md
            fi
          fi
          echo "Release notes to be used:"
          cat release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: "Text Clock v${{ steps.version.outputs.version }}"
          body_path: release_notes.md
          files: |
            text-clock@benica.dev.zip
            text-clock@benica.dev.zip.sig
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
