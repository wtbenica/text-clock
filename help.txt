
  help                Show this help text
  check-deps          Verify required tools are available (yarn, node, glib-compile-schemas, zip, xgettext)

Main Build Targets:
  compile             Compile TypeScript into $(DIST_DIR)
  build               Prepare $(DIST_DIR) for distribution (copy metadata, schemas, locale)
  pack                Create the distribution zip file
  clean               Remove build artifacts (dist/, node_modules/, zip file, locale/, schemas/gschemas.compiled, yarn.lock)

Installation:
  install             Install for the current user only (~/.local/share/gnome-shell/extensions)
  uninstall           Uninstall from the current user (~/.local/share/gnome-shell/extensions)
  install-system      Install for all users - requires sudo (/usr/share/gnome-shell/extensions)
  uninstall-system    Uninstall system-wide - requires sudo (/usr/share/gnome-shell/extensions)

Testing & Validation:
  test                Compile from TypeScript and run tests
  validate            Run build and tests (used as the default CI-style check)
  ci-dry-run          Run validation + non-destructive release in auto mode (CI dry-run)

Full Release Workflows:
  release             Create PR, wait for checks, merge, create GitHub release, update AUR
  release-dry         Create GitHub release, update AUR (pure, dry-run)
  release-auto        Create PR, wait for checks, merge, create GitHub release, update AUR (auto-accept prompts)
  release-pr          Complete release using an existing PR (promote if draft, wait & merge, then release)

GitHub Release:
  release-gh          Create and push GitHub release for current version
  release-gh-dry      Create GitHub release (dry-run)
  release-gh-auto     Create GitHub release (auto-accept prompts)

AUR Release:
  update-aur          Update AUR package for current GitHub release
  update-aur-dry      Non-destructive AUR release simulation for current version
  update-aur-auto     Auto-accepting AUR update (no prompts)

PR Helpers:
  create-pr           Create a PR from current branch to main
  create-pr-draft     Create a draft PR from current branch to main (internal)
  promote-pr          Promote current branch's draft PR to ready for review

AUR / Sync:
  
  AUR_REPO
     Path to AUR clone repository, default is $HOME/Development/gnome-shell-extension-text-clock
  
  SYNC_AUR_ARGS
     --dry-run          Perform a trial run with no changes made
     --commit           Commit changes to the AUR clone repository
     --push             Push changes to the AUR (requires --commit)
     --update           Update .SRCINFO using the project's update-aur.sh script
     --version X.Y.Z    Specify version to use when updating .SRCINFO (overrides reading from package.json)
     --yes              Assume yes to all prompts
     --init             Allow initial sync to an empty AUR clone directory (no PKGBUILD)
                        if the directory basename matches the expected AUR package name
  sync-aur            Copy `aur/` files to local AUR clone and optionally commit/push
                        - Usage: make sync-aur [AUR_REPO=/path/to/aur/clone] [SYNC_AUR_ARGS="<FLAGS>"]
  sync-aur-init       Initialize an AUR clone directory and perform initial sync (--init) (AUR_REPO, SYNC_AUR_ARGS)
                        - Usage: make sync-aur-init [AUR_REPO=/path/to/aur/clone] [SYNC_AUR_ARGS="<FLAGS>"]

Version Management:
  start-dev-branch    Start development branch for new version (TYPE=patch|minor|major)
                        - Must be run from main branch; will check for clean & up-to-date state
