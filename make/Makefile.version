# SPDX-FileCopyrightText: 2024-2025 Wesley Benica <wesley@benica.dev>
#
# SPDX-License-Identifier: GPL-3.0-or-later

# Version management targets
# This file contains targets for bumping versions and managing releases

## === Version Management ===

## start-dev-branch    Start development branch for new version (TYPE=patch|minor|major)
##                       - Must be run from main branch; will check for clean & up-to-date state
start-dev-branch: check-deps
	@if [ -z "$(TYPE)" ]; then \
		echo "ERROR: TYPE parameter is required. Usage: make start-dev-branch TYPE=patch|minor|major"; \
		exit 1; \
	fi
	@if [ "$(TYPE)" != "patch" ] && [ "$(TYPE)" != "minor" ] && [ "$(TYPE)" != "major" ]; then \
		echo "ERROR: TYPE must be patch, minor, or major. Got: $(TYPE)"; \
		exit 1; \
	fi
	@echo "Starting development branch creation process ($(TYPE))..."
	@# Verify we're on main branch
	@current_branch=$$(git rev-parse --abbrev-ref HEAD); \
	if [ "$$current_branch" != "main" ]; then \
		echo "ERROR: You must be on the main branch to bump version. Currently on: $$current_branch"; \
		exit 1; \
	fi
	@# Verify working tree is clean
	@if ! git diff-index --quiet HEAD --; then \
		echo "ERROR: Working tree is not clean. Please commit or stash your changes."; \
		exit 1; \
	fi
	@# Verify we're up to date with remote
	@git fetch origin main >/dev/null 2>&1 || { echo "ERROR: Failed to fetch from origin"; exit 1; }
	@if [ "$$(git rev-parse HEAD)" != "$$(git rev-parse origin/main)" ]; then \
		echo "ERROR: Your main branch is not up to date with origin/main. Please pull the latest changes."; \
		exit 1; \
	fi
	@# Check if GitHub CLI is available
	@command -v gh >/dev/null 2>&1 || { echo "ERROR: GitHub CLI (gh) is not installed. Please install it to create pull requests."; exit 1; }
	@# Get current and new version
	@echo "Current version: $(CURRENT_VERSION)"; \
	new_version=$$(node scripts/start-dev-branch.cjs $(TYPE) --dry-run | grep "New version:" | cut -d' ' -f3 2>/dev/null || echo ""); \
	if [ -z "$$new_version" ]; then \
		echo "ERROR: Failed to calculate new version"; \
		exit 1; \
	fi; \
	echo "Target version: $$new_version"; \
	branch_name="v$$new_version"; \
	echo "Creating development branch: $$branch_name"; \
	git checkout -b "$$branch_name" || { echo "ERROR: Failed to create branch $$branch_name"; exit 1; }; \
	echo "Updating version numbers..."; \
	node scripts/start-dev-branch.cjs $(TYPE) || { echo "ERROR: Version bump script failed"; exit 1; }; \
	git add version.json package.json metadata.json README.md || { echo "ERROR: Failed to stage files"; exit 1; }; \
	git commit -m "Bump version to $$new_version" || { echo "ERROR: Failed to commit changes"; exit 1; }; \
	echo "âœ… Development branch creation complete!"; \
	echo "   Now on development branch: $$branch_name"; \
	echo "   All version numbers updated to $$new_version"; \
	echo "   Ready to start development for the next release"; \
	echo ""; \
	echo "When ready to merge back to main:"; \
	echo "   git push origin $$branch_name"; \
	echo "   gh pr create --base main --head $$branch_name"