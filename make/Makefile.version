# SPDX-FileCopyrightText: 2024-2025 Wesley Benica <wesley@benica.dev>
#
# SPDX-License-Identifier: GPL-3.0-or-later

# Version management targets
# This file contains targets for bumping versions and managing releases

.PHONY: start-dev-branch update-version update-version-rename update-version-dry update-version-force update-version-files-only update-version-files-only-dry update-version-files-only-force

## === Version Management ===

## start-dev-branch    Start development branch for new version (TYPE=patch|minor|major)
##                       - Must be run from main branch; will check for clean & up-to-date state
start-dev-branch: check-deps
	@if [ -z "$(TYPE)" ]; then \
		echo "ERROR: TYPE parameter is required. Usage: make start-dev-branch TYPE=patch|minor|major" >&2; \
		exit 1; \
	fi
	@if [ "$(TYPE)" != "patch" ] && [ "$(TYPE)" != "minor" ] && [ "$(TYPE)" != "major" ]; then \
		echo "ERROR: TYPE must be patch, minor, or major. Got: $(TYPE)" >&2; \
		exit 1; \
	fi
	@echo "Creating development branch ($(TYPE))..."
	@current_branch=$$(git rev-parse --abbrev-ref HEAD); \
	if [ "$$current_branch" != "main" ]; then \
		echo "ERROR: You must be on the main branch to bump version. Currently on: $$current_branch" >&2; \
		exit 1; \
	fi
	@if ! git diff-index --quiet HEAD --; then \
		echo "ERROR: Working tree is not clean. Please commit or stash your changes." >&2; \
		exit 1; \
	fi
	@git fetch origin main >/dev/null 2>&1 || { echo "ERROR: Failed to fetch from origin" >&2; exit 1; }
	@if [ "$$(git rev-parse HEAD)" != "$$(git rev-parse origin/main)" ]; then \
		echo "ERROR: Your main branch is not up to date with origin/main. Please pull the latest changes." >&2; \
		exit 1; \
	fi
	@command -v gh >/dev/null 2>&1 || { echo "ERROR: GitHub CLI (gh) is not installed or not on PATH" >&2; exit 1; }
	@new_version=$$(node scripts/start-dev-branch.cjs $(TYPE) --dry-run | grep "New version:" | cut -d' ' -f3 2>/dev/null || echo ""); \
	if [ -z "$$new_version" ]; then \
		echo "ERROR: Failed to calculate new version" >&2; \
		exit 1; \
	fi; \
	branch_name="v$$new_version"; \
	git checkout -b "$$branch_name" >/dev/null 2>&1 || { echo "ERROR: Failed to create branch $$branch_name" >&2; exit 1; }; \
	node scripts/start-dev-branch.cjs $(TYPE) >/dev/null 2>&1 || { echo "ERROR: Version bump script failed" >&2; exit 1; }; \
	git add version.json package.json metadata.json README.md >/dev/null 2>&1 || { echo "ERROR: Failed to stage files" >&2; exit 1; }; \
	git commit -m "Bump version to $$new_version" >/dev/null 2>&1 || { echo "ERROR: Failed to commit changes" >&2; exit 1; }; \
	@echo "Development branch $$branch_name created successfully."

## === Version Updates ===

## update-version      Update version number on current branch (TYPE=patch|minor|major)
update-version: check-deps
	@if [ -z "$(TYPE)" ]; then \
		echo "ERROR: TYPE parameter is required. Usage: make update-version TYPE=patch|minor|major" >&2; \
		exit 1; \
	fi
	@./scripts/update-version.sh $(TYPE) $(if $(EXTRA_FLAGS),$(EXTRA_FLAGS))

## update-version-rename Update version and rename current branch (TYPE=patch|minor|major)
update-version-rename: check-deps
	@if [ -z "$(TYPE)" ]; then \
		echo "ERROR: TYPE parameter is required. Usage: make update-version-rename TYPE=patch|minor|major" >&2; \
		exit 1; \
	fi
	@./scripts/update-version.sh --rename-branch $(TYPE) $(if $(EXTRA_FLAGS),$(EXTRA_FLAGS))

## update-version-dry  Show what version update would do without executing (TYPE=patch|minor|major)
update-version-dry: check-deps
	@if [ -z "$(TYPE)" ]; then \
		echo "ERROR: TYPE parameter is required. Usage: make update-version-dry TYPE=patch|minor|major" >&2; \
		exit 1; \
	fi
	@./scripts/update-version.sh --dry-run $(TYPE) $(if $(EXTRA_FLAGS),$(EXTRA_FLAGS))

## update-version-force Update version without confirmation prompts (TYPE=patch|minor|major)
update-version-force: check-deps
	@if [ -z "$(TYPE)" ]; then \
		echo "ERROR: TYPE parameter is required. Usage: make update-version-force TYPE=patch|minor|major" >&2; \
		exit 1; \
	fi
	@./scripts/update-version.sh --force $(TYPE) $(if $(EXTRA_FLAGS),$(EXTRA_FLAGS))

## update-version-files-only Update version in files only, no git operations (TYPE=patch|minor|major)
update-version-files-only: check-deps
	@if [ -z "$(TYPE)" ]; then \
		echo "ERROR: TYPE parameter is required. Usage: make update-version-files-only TYPE=patch|minor|major" >&2; \
		exit 1; \
	fi
	@./scripts/update-version.sh --no-git $(TYPE) $(if $(EXTRA_FLAGS),$(EXTRA_FLAGS))

## update-version-files-only-dry Preview file-only version update without executing (TYPE=patch|minor|major)
update-version-files-only-dry: check-deps
	@if [ -z "$(TYPE)" ]; then \
		echo "ERROR: TYPE parameter is required. Usage: make update-version-files-only-dry TYPE=patch|minor|major" >&2; \
		exit 1; \
	fi
	@./scripts/update-version.sh --no-git --dry-run $(TYPE) $(if $(EXTRA_FLAGS),$(EXTRA_FLAGS))

## update-version-files-only-force Update version in files only without confirmation (TYPE=patch|minor|major)
update-version-files-only-force: check-deps
	@if [ -z "$(TYPE)" ]; then \
		echo "ERROR: TYPE parameter is required. Usage: make update-version-files-only-force TYPE=patch|minor|major" >&2; \
		exit 1; \
	fi
	@./scripts/update-version.sh --no-git --force $(TYPE) $(if $(EXTRA_FLAGS),$(EXTRA_FLAGS))