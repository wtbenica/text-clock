# SPDX-FileCopyrightText: 2024-2025 Wesley Benica <wesley@benica.dev>
#
# SPDX-License-Identifier: GPL-3.0-or-later

# Build and packaging targets
# This file contains targets for compiling, building, and packaging the extension

.PHONY: compile build pack docs docs-serve clean install uninstall install-system uninstall-system create_ext_dir pot check-resources

## === Main Build Targets ===

## compile             Compile TypeScript into $(DIST_DIR)
compile: $(DIST_DIR)/extension.js

## build               Prepare $(DIST_DIR) for distribution (copy metadata, schemas, locale)
build: $(DIST_DIR)/extension.js schemas/gschemas.compiled locale/ resources/preferences.gresource
	@echo "Building distribution package..."
	@mkdir -p $(DIST_DIR)
	@cp -r schemas $(DIST_DIR)/ 2>/dev/null || true
	@cp metadata.json $(DIST_DIR)/ 2>/dev/null || true
	@cp -f resources/preferences.gresource $(DIST_DIR)/ || { echo "ERROR: Failed to copy compiled resource" >&2; exit 1; }
	@cp -r $(LOCALE_DIR) $(DIST_DIR)/ 2>/dev/null || true
	@find po -type f -name "*.po~" -exec rm -f {} \; >/dev/null 2>&1 || true
	@echo "Distribution package ready."

## pack                Create the distribution zip file
pack: build ${ZIP_FILE}

## docs                Generate API documentation using TypeDoc
docs: node_modules/
	@echo "Generating API documentation..."
	@command -v yarn >/dev/null 2>&1 || { echo "ERROR: yarn is required for documentation generation" >&2; exit 1; }
	@yarn docs || { echo "ERROR: Documentation generation failed" >&2; exit 1; }
	@echo "Documentation generated in docs/ directory"

## docs-serve          Generate and serve documentation locally on port 8080
docs-serve: docs
	@echo "Serving documentation at http://localhost:8080"
	@echo "Press Ctrl+C to stop the server"
	@cd docs && python3 -m http.server 8080

## clean               Remove build artifacts (dist/, node_modules/, zip file, locale/, schemas/gschemas.compiled, yarn.lock, .po~ backup files, docs/)
clean:
	@echo "Cleaning build artifacts..."
	@rm -rf $(DIST_DIR) >/dev/null 2>&1 || { echo "ERROR: Failed to remove dist directory" >&2; exit 1; }
	@rm -rf node_modules/ >/dev/null 2>&1 || { echo "ERROR: Failed to remove node_modules" >&2; exit 1; }
	@rm -f ${ZIP_FILE} >/dev/null 2>&1 || { echo "ERROR: Failed to remove zip file" >&2; exit 1; }
	@rm -rf $(LOCALE_DIR) >/dev/null 2>&1 || { echo "ERROR: Failed to remove locale directory" >&2; exit 1; }
	@rm -f schemas/gschemas.compiled >/dev/null 2>&1 || { echo "ERROR: Failed to remove compiled schemas" >&2; exit 1; }
	@rm -f yarn.lock >/dev/null 2>&1 || { echo "ERROR: Failed to remove yarn.lock" >&2; exit 1; }
	@rm -rf docs/ >/dev/null 2>&1 || { echo "ERROR: Failed to remove docs directory" >&2; exit 1; }
	@find . -type f \( -name "*.zip" -o -name "*.zip.*" -o -name "*.zip.sig" -o -name "*.zip.sig.*" \) -exec rm -f {} \; >/dev/null 2>&1 || { echo "ERROR: Failed to remove zip files" >&2; exit 1; }
	@find po -type f -name "*.po~" -exec rm -f {} \; >/dev/null 2>&1 || { echo "ERROR: Failed to remove .po~ backup files" >&2; exit 1; }
	@if [ -d "aur" ]; then \
		find aur -type f \( -name "*.key" -o -name "*.pkg.tar.*" -o -name "*.pkg.tar.zst" \) -exec rm -f {} \; >/dev/null 2>&1 || { echo "ERROR: Failed to remove AUR artifacts" >&2; exit 1; }; \
	fi
	@echo "Build artifacts cleaned."

## === Installation ===

## install             Install for the current user only (~/.local/share/gnome-shell/extensions)
install: create_ext_dir build i18n-compile
	@echo "Installing extension..."
	@rm -rf $(GNOME_SHELL_EXT_DIR)/$(NAME)@$(DOMAIN) >/dev/null 2>&1 || { echo "ERROR: Failed to remove existing extension" >&2; exit 1; }
	@cp -R $(DIST_DIR) $(GNOME_SHELL_EXT_DIR)/$(NAME)@$(DOMAIN) || { echo "ERROR: Failed to copy extension files" >&2; exit 1; }
	@mkdir -p $(HOME)/.local/share/glib-2.0/schemas || { echo "ERROR: Failed to create user schemas directory" >&2; exit 1; }
	@cp -f schemas/org.gnome.shell.extensions.$(NAME).gschema.xml $(HOME)/.local/share/glib-2.0/schemas/ || { echo "ERROR: Failed to copy schema file" >&2; exit 1; }
	@glib-compile-schemas $(HOME)/.local/share/glib-2.0/schemas >/dev/null 2>&1 || { echo "ERROR: Failed to compile user schemas" >&2; exit 1; }
	@find po -type f -name "*.po~" -exec rm -f {} \; >/dev/null 2>&1 || true
	@echo "Extension installed successfully."

## uninstall           Uninstall from the current user (~/.local/share/gnome-shell/extensions)
uninstall:
	@echo "Uninstalling the extension from user directory..."
	@if [ -d "$(GNOME_SHELL_EXT_DIR)/$(NAME)@$(DOMAIN)" ]; then \
		rm -rf "$(GNOME_SHELL_EXT_DIR)/$(NAME)@$(DOMAIN)" || { echo "Removing extension failed"; exit 1; }; \
		echo "Extension uninstalled from user directory."; \
		if [ -f "$(HOME)/.local/share/glib-2.0/schemas/org.gnome.shell.extensions.$(NAME).gschema.xml" ]; then \
			rm -f "$(HOME)/.local/share/glib-2.0/schemas/org.gnome.shell.extensions.$(NAME).gschema.xml" || { echo "Removing user schema failed"; exit 1; }; \
			glib-compile-schemas "$(HOME)/.local/share/glib-2.0/schemas" || { echo "Recompiling user GSettings schemas failed"; exit 1; }; \
		fi; \
	else \
		echo "Extension not found in user directory."; \
	fi

## install-system      Install for all users - requires sudo (/usr/share/gnome-shell/extensions)
install-system: build i18n-compile
	@echo "Installing the extension system-wide..."
	@if [ "$$EUID" -ne 0 ]; then \
		echo "System-wide installation requires root privileges."; \
		echo "Please run: sudo make install-system"; \
		exit 1; \
	fi
	SYSTEM_EXT_DIR="/usr/share/gnome-shell/extensions"; \
	mkdir -p "$$SYSTEM_EXT_DIR" || { echo "Creating system extension directory failed"; exit 1; }; \
	rm -rf "$$SYSTEM_EXT_DIR/$(NAME)@$(DOMAIN)" || { echo "Removing existing system extension failed"; exit 1; }; \
	cp -R $(DIST_DIR) "$$SYSTEM_EXT_DIR/$(NAME)@$(DOMAIN)" || { echo "Copying extension to system directory failed"; exit 1; }; \
	# Install GSettings schema to system location and compile
	if [ -f "$(CURDIR)/schemas/org.gnome.shell.extensions.$(NAME).gschema.xml" ]; then \
		install -Dm644 "$(CURDIR)/schemas/org.gnome.shell.extensions.$(NAME).gschema.xml" \
			"/usr/share/glib-2.0/schemas/org.gnome.shell.extensions.$(NAME).gschema.xml" || { echo "Installing system schema failed"; exit 1; }; \
		glib-compile-schemas /usr/share/glib-2.0/schemas || { echo "Compiling system GSettings schemas failed"; exit 1; }; \
	fi; \
	find "/usr/share/gnome-shell/extensions/$(NAME)@$(DOMAIN)" -type f -exec chmod 644 {} \; || { echo "Setting file permissions failed"; exit 1; }; \
	find "/usr/share/gnome-shell/extensions/$(NAME)@$(DOMAIN)" -type d -exec chmod 755 {} \; || { echo "Setting directory permissions failed"; exit 1; }
	@echo "System-wide installation complete."
	@echo "The extension is now available to all users on this system."

## uninstall-system    Uninstall system-wide - requires sudo (/usr/share/gnome-shell/extensions)
uninstall-system:
	@echo "Uninstalling the extension from system directory..."
	@if [ "$$EUID" -ne 0 ]; then \
		echo "System-wide uninstallation requires root privileges."; \
		echo "Please run: sudo make uninstall-system"; \
		exit 1; \
	fi
	@SYSTEM_EXT_DIR="/usr/share/gnome-shell/extensions"; \
	if [ -d "$$SYSTEM_EXT_DIR/$(NAME)@$(DOMAIN)" ]; then \
		rm -rf "$$SYSTEM_EXT_DIR/$(NAME)@$(DOMAIN)" || { echo "Removing system extension failed"; exit 1; }; \
		echo "Extension uninstalled from system directory."; \
	else \
		echo "Extension not found in system directory."; \
	fi

### === Helpers ===

# Update the zip file if any of the source files have changed
${ZIP_FILE}: metadata.json node_modules/ $(DIST_DIR)/extension.js schemas/gschemas.compiled locale/
	@echo "Packaging the extension..."
	cp -r schemas $(DIST_DIR)/ || { echo "Copying schemas failed"; exit 1; }
	cp metadata.json $(DIST_DIR)/ || { echo "Copying metadata.json failed"; exit 1; }
	cp -r $(LOCALE_DIR) $(DIST_DIR)/ || { echo "Copying locale directory failed"; exit 1; }
	(cd $(DIST_DIR) && zip ../${ZIP_FILE} -9r .) || { echo "Zipping extension failed"; exit 1; }
	# Also provide an unversioned, user-friendly ZIP for GitHub release assets
	cp -f ${ZIP_FILE} $(NAME)@${DOMAIN}.zip || { echo "Failed to copy ${ZIP_FILE} to $(NAME)@${DOMAIN}.zip"; exit 1; }

# Ensure the local GNOME Shell extensions directory exists
create_ext_dir:
	@mkdir -p $(GNOME_SHELL_EXT_DIR) || { echo "ERROR: Failed to create GNOME Shell extensions directory" >&2; exit 1; }

# Compile TypeScript files
$(DIST_DIR)/extension.js: $(TS_FILES) node_modules/
	@echo "Compiling TypeScript..."
	@command -v yarn >/dev/null 2>&1 || { echo "ERROR: yarn is required for compilation" >&2; exit 1; }
	@yarn tsc -p config/tsconfig.json || { echo "ERROR: TypeScript compilation failed" >&2; exit 1; }

# Ensure node modules are installed based on package.json before proceeding
node_modules/: package.json
	@echo "Installing dependencies..."
	@command -v yarn >/dev/null 2>&1 || { echo "ERROR: yarn is required to install dependencies" >&2; exit 1; }
	@yarn install --silent || { echo "ERROR: Failed to install dependencies" >&2; exit 1; }

# Compile GSettings schemas
schemas/gschemas.compiled: schemas/org.gnome.shell.extensions.$(NAME).gschema.xml
	@echo "Compiling GSettings schemas..."
	@glib-compile-schemas schemas >/dev/null 2>&1 || { echo "ERROR: GSettings schema compilation failed" >&2; exit 1; }

# Generate a new POT file (collects translatable strings from compiled JS)
pot: po/${NAME}@${DOMAIN}.pot

# Prepare locale directory
locale/: $(MO_FILES)
	@echo "Preparing locale..."
	@mkdir -p $(LOCALE_DIR) || { echo "Creating locale directory failed"; exit 1; }
	@for file in $(MO_FILES); do \
		lang=$$(basename $$file .mo); \
		mkdir -p $(LOCALE_DIR)/$$lang/LC_MESSAGES || { echo "Creating message directory for $$lang failed"; exit 1; }; \
		cp $$file $(LOCALE_DIR)/$$lang/LC_MESSAGES/$(NAME)@$(DOMAIN).mo || { echo "Copying $$file failed"; exit 1; }; \
	done

# Generate a new POT file
po/text-clock@benica.dev.pot: $(DIST_DIR)/extension.js
	@echo "Generating a new POT file..."
	@command -v yarn >/dev/null 2>&1 || { echo "ERROR: yarn is required to generate POT files; please install and try again." >&2; exit 1; }
	@yarn tsc -p config/tsconfig.pot.json >/dev/null 2>&1 || { echo "ERROR: TypeScript compilation failed" >&2; exit 1; }
	@js_count=$$(find $(DIST_DIR) -type f -name '*.js' | wc -l); \
	if [ "$$js_count" -eq 0 ]; then \
		echo "ERROR: No JS files found in $(DIST_DIR) for POT generation" >&2; exit 1; \
	fi; \
	find $(DIST_DIR) -type f -name '*.js' -print0 | xargs -0 xgettext --from-code=UTF-8 --keyword=_ --output=po/text-clock@benica.dev.pot >/dev/null 2>&1 || { echo "ERROR: Generating POT file failed" >&2; exit 1; }


## Compile extension resources (strict)
resources/preferences.gresource: resources/preferences.gresource.xml
	@echo "Compiling extension resources (preferences.gresource)..."
	@if [ ! -f resources/preferences.gresource.xml ]; then \
		echo "ERROR: resources/preferences.gresource.xml is missing. Resource XML is required."; exit 1; \
	fi
	@command -v glib-compile-resources >/dev/null 2>&1 || { echo "ERROR: glib-compile-resources is required to compile resources"; exit 1; }
	@glib-compile-resources resources/preferences.gresource.xml --target=resources/preferences.gresource --sourcedir=resources || { echo "glib-compile-resources failed (check referenced files in resources/preferences.gresource.xml)"; exit 1; }


## Diagnostic: check which resource files referenced by the XML are missing
check-resources:
	@echo "Checking resources referenced by resources/preferences.gresource.xml..."
	@if [ ! -f resources/preferences.gresource.xml ]; then \
		echo "ERROR: resources/preferences.gresource.xml not found"; exit 1; \
	fi
	@python3 scripts/check-resources.py