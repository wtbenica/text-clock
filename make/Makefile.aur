# SPDX-FileCopyrightText: 2024-2025 Wesley Benica <wesley@benica.dev>
#
# SPDX-License-Identifier: GPL-3.0-or-later

# AUR package management targets
# This file contains targets for syncing and managing AUR packages

.PHONY: sync-aur sync-aur-init update-aur-local update-aur-local-dry

# AUR configuration
AUR_REPO ?= $(HOME)/Development/gnome-shell-extension-text-clock
SYNC_AUR_ARGS ?=

## === AUR / Sync ===
## 
## AUR_REPO
##    Path to AUR clone repository, default is $HOME/Development/gnome-shell-extension-text-clock
## 
## SYNC_AUR_ARGS
##    --dry-run          Perform a trial run with no changes made
##    --commit           Commit changes to the AUR clone repository
##    --push             Push changes to the AUR (requires --commit)
##    --update           Update .SRCINFO using the project's update-aur.sh script
##    --version X.Y.Z    Specify version to use when updating .SRCINFO (overrides reading from package.json)
##    --yes              Assume yes to all prompts
##    --init             Allow initial sync to an empty AUR clone directory (no PKGBUILD). Fails if PKGBUILD already exists.
##                       if the directory basename matches the expected AUR package name
## 
## sync-aur            Copy `aur/` files to local AUR clone and optionally commit/push
##                       - Usage: make sync-aur [AUR_REPO=/path/to/aur/clone] [SYNC_AUR_ARGS="<FLAGS>"]
##                       - Example: make sync-aur SYNC_AUR_ARGS="--commit --push"
sync-aur:
	@echo "Starting AUR sync process..."
	@if echo "$(SYNC_AUR_ARGS)" | grep -q -- "--dry-run"; then \
		echo "→ Running sync with dry-run mode"; \
		./scripts/sync-to-aur.sh --aur-repo "$(AUR_REPO)" $(SYNC_AUR_ARGS) || { echo "✗ AUR sync failed" >&2; exit 1; }; \
		echo "✓ Dry-run completed - no changes made"; \
	elif echo "$(SYNC_AUR_ARGS)" | grep -q -- "--update"; then \
		echo "→ Running sync with update mode (downloading and calculating checksums)"; \
		./scripts/sync-to-aur.sh --aur-repo "$(AUR_REPO)" $(SYNC_AUR_ARGS) || { echo "✗ AUR sync failed" >&2; exit 1; }; \
		echo "✓ AUR sync with updates completed successfully"; \
	else \
		echo "→ Running sync with live mode"; \
		./scripts/sync-to-aur.sh --aur-repo "$(AUR_REPO)" $(SYNC_AUR_ARGS) || { echo "✗ AUR sync failed" >&2; exit 1; }; \
		echo "✓ AUR sync completed successfully"; \
	fi

## sync-aur-init       Initialize an AUR clone directory and perform initial sync (--init) (AUR_REPO, SYNC_AUR_ARGS)
##                       - Usage: make sync-aur-init [AUR_REPO=/path/to/aur/clone] [SYNC_AUR_ARGS="<FLAGS>"]
sync-aur-init:
	@echo "Starting AUR clone initialization..."
	@echo "→ Creating initial sync to empty AUR directory"
	@./scripts/sync-to-aur.sh --init --aur-repo "$(AUR_REPO)" $(SYNC_AUR_ARGS) >/dev/null 2>&1 || { echo "✗ AUR initialization failed" >&2; exit 1; }
	@echo "✓ AUR clone initialized successfully"

## update-aur-local    Update PKGBUILD and .SRCINFO in local aur/ directory (no staging repo)
##                       - Downloads ZIP from GitHub release and updates checksums locally
update-aur-local:
	@echo "Starting local AUR file update..."
	@echo "→ Updating PKGBUILD and .SRCINFO for version $(CURRENT_VERSION)"
	@cd aur && ./update-aur.sh "$(CURRENT_VERSION)"
	@echo "✓ Local AUR files updated successfully"

## update-aur-local-dry Dry run of local AUR update (shows what would change)
update-aur-local-dry:
	@echo "Starting local AUR file update (dry-run)..."
	@echo "→ Previewing changes for version $(CURRENT_VERSION)"
	@cd aur && ./update-aur.sh --dry-run "$(CURRENT_VERSION)"
	@echo "✓ Dry-run completed - no changes made"